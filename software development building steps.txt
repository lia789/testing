""" this document about building "Software Solutions" freelance project ✋️ """


⬜️ Project pattern type of software development:
	◾️ User input based data scraping Streamlit web application
	◾️ Automate feed scraping data on database with corn job



⬜️ General conclutions about "Software Development" projects:
	◾️ I should not work with colaborative developer projects
	◾️ Should not try to reinvent while, always use existing component and build high quality solutions
	◾️ Most of time user don't know about solution type, I have to deside solution type
	◾️ Every data scraping software project is seed of two core proejct pattern: 1. User input based solutions 2. Corn job solutions
	◾️ I should do only tools based web application project, that client don't know about solution and I am building web tools for them
	◾️ Every solutions will be new, domain knowledge are different, API documentations are different, and I hve to learn that down the road
	◾️ Doing fesability study is step about selecting project, process about fesability study:
			◽️ Understand domain vogubulary
			◽️ Understand core requirements
			◽️ Understand architechture
	◾️ Reqirements collection component:
			◽️ Project goals
			◽️ User of the system
			◽️ Application core feature
			◽️ Similar solutions
	◾️ Project scope document is backbone of the project, it will write on Google Doces and share as PDF with client
			◽️ cover page (title, version, project id, developer name)
			◽️ application description (project goals + application core feature)
			◽️ user of the system
			◽️ deadline
			◽️ core feature of the application
			◽️ project boundary
			◽️ project delivery materails
			◽️ project requirements
			◽️ functional requirements
			◽️ nonfunctional requirements
			◽️ server
			◽️ technology & framework
	◾️ Design document component
			◽️ project meta data
			◽️ requirements (totaly come from project scope document)
			◽️ separation of concern
			◽️ framework component
			◽️ milestone task
	◾️ Software project quality requirements
			◽️ application should not stack
			◽️ user friendly interface
			◽️ should handle error
			◽️ fast running application
			◽️ free server
			◽️ application uses documentation
			◽️ well written source code
	◾️ Functional requirements are technical feature of a system
			◽️ functional requirements should writen as order of system input, computation, and output
			◽️ functional requirements should as short title and description, description written like "The application shall..."
	◾️ Nonfunctional requirements define client satisfaction, component of nonfunctional requirements
			◽️ performance
			◽️ relaibility
			◽️ usability
			◽️ maintanibility
			◽️ cost effective
			
	◾️ Project boundary mean list of things about include and not include, and it will write as short sentence like nonfunctional requirements
	


⬜️ Steps about building software solution project:
	◾️ Do fesability study about project
	◾️ Client communication and collect project requirements
	◾️ Write project scope document and approve with client
			◽️ Work with cover page
			◽️ Write application description with touch of business goals and application core feature
			◽️ Write functional and nonfunctional requirements
			◽️ Define project boundary
			◽️ Write list of project delevery materials
			◽️ Write user of the system, server, and technology
	◾️ Write design document
			◽️ Write project meta data
			◽️ Organize existing requirements based on project scope document
			◽️ Brain strome existing solutions
			◽️ Break application into separation of concern
			◽️ Write frontend framework component
			◽️ Write data extraction framework component
			◽️ Write down milestone task		
	◾️ Build solution based on milestone task
	◾️ Deploy and handover project
	



⬜️ Design document component:
⬜️⬜️⬜️ PROJECT META DATA ⬜️⬜️⬜️
🔳️ PROJECT_NAME:
🔳️ DEADLINE:
🔳️ PRICE:
🔳️ COUNTRY_&_TIME_DEFERENCE:
🔳️ CLIENT_NAME_&_DESIGNATIONS:
🔳️ FREELANCE_PLATFROM:


⬜️⬜️⬜️ REQUIREMENTS ⬜️⬜️⬜️
🔳️ EXISTING_IMPORTANT_DOCUMENT:
🔳️ APPLICATION_DESCRIPTION:
🔳️ FUNCTIONAL_REQUIREMENTS:
🔳️ NONFUNCTIONAL_REQUIREMENTS:
🔳️ USER_OF_THE_SYSTEM:
🔳️ PROJECT_BOUNDARY:
🔳️ DELEVERY_MATERIALS:


⬜️⬜️⬜️ DESIGN COMPONENT ⬜️⬜️⬜️
🔳️ SEPARATION_OF_CONCERN:
🔳️ FRONT_END_FRAMEWORK_MATERIALAS:
🔳️ DATA_EXTRACTION_MATERIALS:
🔳️ SCRAPY_PROJECT_COMPONENT:
🔳️ MILESTONE:




⬜️ Conlcution about cloud service provider:
	◾️ I don't want to use 3rd party small cloud service provider, rather then using only AWS and Google Cloud
	◾️ Should not too much complex setup about client end AWS or Google Cloud account
	◾️ Type of Python programm I have to deploy on cloud:
		◽️ Python script
		◽️ Scrapy project
		◽️ Python script and Scrapy project with Playwright
		◽️ Streamlit application
		◽️ Docker container
	◾️ 
	◾️
	◾️








## AWS RAW ##	
AWS Lambda
AWS Fargate
AWS Elastic Beanstalk

			
			


## Software Development Raw Task ##
1. Building project building documents and organize cheat sheet
2. Brain strome about cloud solutions
3. Building Zillow application
4. Brain strome about Upwork projects requirements






## TASK ##
◽️ Dedicated reading and understand session about cloud server products
◽️ Work with Zyte product feature and findout solutions about your project
◽️ Build project scope document on Google docs
◽️ Write down design pattern componet
◽️ Very good knowldege about cloud deployment


			
			
----
I am a Python developer.
My office job is building this list of type Python application:
1. Web scraping Python script with request and beautiful soup library
2. Web scraping project with Scrapy framework
3. Automation script with Python, Playwright and Chrome headless
4. Python Streamlit application
5. Docker container Python application
6. Web scraping project with corn job

What are AWS cost effective solutions are there?

I always push my code on Github repository, it will be good if I push code Github it automatcly deploy my lates code.
----
			
			
			
	
		
