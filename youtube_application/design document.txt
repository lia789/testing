⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️ PROJECT META DATA ⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️

✅️ project_name: "YouTube Metrics Manager"
✅️ price: 300$
✅️ deadline:
✅️ client_technical_expertise: High



⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️ DESIGN BASELINE ⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️

✅️ high_level_separation_of_concern:
	➡️ Design user friendly UI
	➡️ Build YouTube web scraping script and extract data from API
	➡️ Write Django framework code structure
	➡️ Integrate web scraping script with Django, and build dynamic scraping status with JavaScript
	➡️ Compose everything code structure on Docker container and deploy on Render

	
✅️ project_delivery_materials:
	➡️ Live website on Render
	➡️ Store source code and other materials on "admin" repository


✅️ project_architecture: True
✅️ code_structure: True

✅️ data_structure:
	➡️ Channels Meta Data, based on keyword search
		♊️ title
		♊️ descriptions
		♊️ country
		♊️ view_count
		♊️ comment_count
	
	➡️ Comment Scraper
		♊️ author_display_name
		♊️ author_channels_url
		♊️ text_display
		♊️ published
		♊️ like_count
	
	➡️ Individual Channels All Video Meta Data
		♊️ 
		♊️
		♊️

	➡️ Search Videos Meta Data
		♊️
		♊️
		♊️

	➡️ ScrapyD Meta Data
		♊️ running_job
		♊️ pending_job
		♊️ finished
		♊️ job_id
		♊️ spider_list
		♊️ start_time
		♊️ end_time
		♊️ spider_running_duration_time
		♊️ job_finish_number


✅️ architecture: True
✅️ code_structure: Django Project
	




⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️ DJANGO FRAMEWORK COMPONENT ⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️

✅️ django_framework_core_feature:
	♊️ keyword as user input
	♊️ submit button
	♊️ display limited data as like pandas data frame
	♊️ download file as CSV


✅️ project_name: youtube_metrics
✅️ application_name: data_miner_app
✅️ model_class_name:
	 ChannelsMetaData
	 CommentsData
	 ChannelsMetaData
	 
✅️ superuser_name_&_password: admin, 123

✅️ views_description:
	There will be "channels_meta_data" function based view,
	that will read user input and collect data from YouTube API, save on database, and redirect to channels_meta_data_scraping page for down load data as CSV file.
	channels_meta_data_scraping will be another function based view, that will show small amount of data and a download button to get scraping data as CSV file from database and clean the database after download CSV from client end, and redirect to home page. 

	Do this every feature of this application, make sure every feature should have separate application


✅️ web_scraping_integrating_description:
	Reading keyword from user and inject on API query parameters

✅️ database_query_description:
	YouTube API data should store on data base as bulk upload, and delete bulk after user download the CSV file
	
	
	


⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️ UX UI DESIGN PROCESS ⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️

✅️ list of task about UX UI:
	♊️ Define website text content
	♊️ Define color about application




⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️ PROJECT DELIVERY PROCESS ⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️

✅️ project_delivery process:
	♊️ Project will deploy on render
	♊️ Supported materials will be polish after complete full feature application
	♊️ Materials will be store on "admin" repository



⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️ PROJECT MILESTONE ⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️
	1️⃣️ Build Django project structure
	2️⃣️ Design user interface top of Django project
	3️⃣️ Build YouTube data extraction code on Jupyter lab
	4️⃣️ Integrate data extraction code with Django
	5️⃣️ Deploy application on render
	6️⃣️ Add other supported page on application
	7️⃣️ Add full feature data extraction code on application
	8️⃣️ Deploy application
	9️⃣️ Organize files and close the project


