"""
this document about building web application with Django🖐️
"""


⬜️ What steps to follow building a Web Application solutions❓️
	1️⃣️ Do feasibility study with your subconscious mind
	2️⃣️ Write proposal with application core feature and mention project name
	3️⃣️ Communication client and asking questions like
			➡️ Business Goals
			➡️ System User
			➡️ System Core Feature
			➡️ Similar Solution
			➡️ Web Scraping Meta Data
			➡️ Data Structure
			➡️ Web Application Meta Data
	4️⃣️ Building "Vision Document 📃️" with this structure:
		👉️ Write down project and client meta data
		👉️ Gather requirements help of existing document, domain knowledge and questions
		👉️ Analyzing requirements
		👉️ Process requirements
		👉️ UX UI design component
	5️⃣️ Design user interface help of this structure:
		👉️ Inspire with other existing solutions
		👉️ Write down website structure
		👉️ Draw user flow diagram
		👉️ Draw web pages scratch on paper
		👉️ Draw wire frame diagram  
	6️⃣️ Writing project scope document
	7️⃣️ Validation with client project scope and UI documents
	8️⃣️ Write "Design Document 📃️" for building solution
	9️⃣️ Build solution based on "Design Document" Milestone
	🔟️ Handover project and do all formalities like asking good review, store projects on "Archive"




⬜️ What about feasibility study❓️
Your subconscious mind will define project is feasible or not,
some common factor are:
	- Can I do this confident
	- Match project catalog
	- Done it before
	- Understand domain
	- Enough time
	- Good client
	- Handsome money
	


⬜️ What about communication with client and asking questions❓️
This is tricky part only communication skills save us, convert prospect to sales.
This is list of goals about initial communication with client:
	➡️ Consult client and uncover client real need
	➡️ Convert communication to sales
	➡️ Collect project building materials

I should ask questions based on this topics:
	➡️ Business Goals
	➡️ System User
	➡️ System Core Feature
	➡️ Similar Solution
	➡️ Web Scraping Meta Data
	➡️ Data Structure
	➡️ Web Application Meta Data



⬜️ How to build "Vision Document" for a project❓️
Vision document is base band about building a high quality project, before start building a Vision document make sure you convert it into sales.
Start with creating a GitHub repository and copy Vision Document template file.

Possible meta data component about project and client ✋️:
	♊️ title
	♊️ price
	♊️ deadline
	♊️ project_name
	♊️ client_name
	♊️ client_designation
	♊️ country
	♊️ time_deference
	♊️ client_technical_expertise
	♊️ project_objectives

Possible component about requirements gathering ✋️:
	♊️ client_job_description
	♊️ application_core_feature
	♊️ questions_answer
	♊️ domain_knowledge
	♊️ constrain
	♊️ existing_solutions_key_point
	♊️ data_structure
	♊️ web_scraping_meta_data
	♊️ web_application_meta_data

Requirements analyzing steps and component ✋️:
	♊️ system_user (identify systems user and their goals)
	♊️ application_core_feature (identify application core feature)
	➡️ draw Use Case diagram

Requirements processing steps and component ✋️:
	♊️ project_scope_description
	♊️ functional_requirement
	♊️ nonfunctional_requirement
	♊️ project_delivery_process
	♊️ project_delivery_materials
	♊️ data_structure
	♊️ web_scraping_meta_data
	♊️ web_application_meta_data

UX UI design component ✋️:
	♊️ Who are user of this system?
	♊️ What are their desire expectations about this system?
	♊️ What are list of pages should have?




⬜️ How to build "Design Document"❓️
Based on "Design Document" milestone full solution will build, it insure easy and high quality solution building process.
Design document has this list of materials:
	➡️ "Design Document" writing on text file
	➡️ Jupyterlab Notebook for snipe source code
	➡️ Image directory for supported diagrams
	➡️ Chat GPT conversion markdown document

Steps about building a Design document:
	👉️ Make sure You have Vision Document, SRS, and other supported files
	👉️ Write project meta data
	👉️ Define high level separation of concern about the solution
	👉️ Write project delivery materials
	👉️ Define architecture about solutions, and design diagram
	👉️ Define code structure about project
	👉️ Define data structure
	👉️ Write Django framework components
	👉️ Write web scraping components
	👉️ Define UX UI design process and possible task
	👉️ Write down project delivery process
	👉️ Write milestone task for building the solution 

Design document project meta data components:
	♊️ project_name
	♊️ price
	♊️ deadline
	♊️ client_technical_expertise

Design base line data components:
	♊️ high_level_separation_of_concern
	♊️ project_delivery_materials
	♊️ project_architecture
	♊️ code_structure
	♊️ 
	♊️
	♊️
	♊️

⬜️ How to build a Django project❓️
	👉️ Make sure, You have "Design Document"
	👉️ Project
	👉️ Application
	👉️ Setup Django project settings
	👉️ Define models about your application
	👉️ Define admin
	👉️ Migrate models and create super user
	👉️ Create forms based on requirements
	👉️ Define views as requirements
	👉️ Create URL patterns
	👉️ Design templates and work with static file
	👉️ Implement authentication and sessions
	👉️ Integrating web scraping code
	👉️ Handle exceptions and display meaningful error messages to the user
	👉️ Deploy the application

	➡️ List of common framework component for building Django project:
		♊️ django_framework_core_feature
		♊️ project_name
		♊️ application_name
		♊️ model_class_name_&_field
		♊️ superuser_name
		♊️ views_description
		♊️ urls_pattern_description
		♊️ web_scraping_integrating_description
		♊️ forms_description
		♊️ database_query_description

		


⬜️ What are supported materials available building Django application efficiency❓️
	➡️ django-crispy-forms (https://django-crispy-forms.readthedocs.io/en/latest/)
	➡️ django-import-export (https://django-import-export.readthedocs.io/en/latest/index.html)
	➡️ django-filter (https://django-filter.readthedocs.io/en/stable/)
	➡️ Django Debug Toolbar (https://django-debug-toolbar.readthedocs.io/en/latest/)
	➡️ Django-Sentry (https://docs.sentry.io/platforms/python/guides/django/)
	➡️ django-extensions (https://django-extensions.readthedocs.io/en/stable/index.html)
	➡️ django-simple-history (https://django-simple-history.readthedocs.io/)
	➡️ django-model-utils (https://github.com/jazzband/django-model-utils)
	➡️ django-environ (https://django-environ.readthedocs.io/en/latest/)



## Raw Requirements for Django ##
- virtual environment
- define project requirements
- choose database
- define structure of the project
- work with security
- implement caching
- setup 3rd party packages for Django best practices
- implement analytic in your project, to track the performance and usage of the application
- implement logging in your project, to track errors and debug issues
- optimize the performance of the application, by using efficient algorithms, minimizing the number of database queries, and using caching where possible
- implement continuous integration and deployment
- implement email and SMS notifications in your project, to send notifications to users













