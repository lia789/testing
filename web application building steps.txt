""" this document about building web application 🖐️ """


⬜️ What steps to follow building a Web Application solution for client❓️
	1️⃣️ Do feasibility study with your subconscious mind
	2️⃣️ Write proposal with application core feature
	3️⃣️ Convert prospect into sales, and collect project building materials
	4️⃣️ Building "Vision Document 📃️"
	5️⃣️ Design User Interface
	6️⃣️ Writing "SRS Document 📃️"
	7️⃣️ Validate "SRS" and UI files with client
	8️⃣️ Write "Design Document 📃️"
	9️⃣️ Build solution based on design document Milestone 🖥️
	🔟️ Handover and close project







⬜️ What about feasibility study❓️
Your subconscious mind will define project is feasible or not.
some common factor are:
	➡️ Can I do this
	➡️ Match project catalog
	➡️ Done it before
	➡️ Understand domain
	➡️ Enough time
	➡️ Good client
	➡️ Handsome money
	

⬜️ What about communication with client and asking questions❓️
This is tricky part only communication and business skills save pus to convert prospect into sales.
This is list of goals about initial communication with client:
	➡️ Consult client and uncover client true requirements
	➡️ Convert prospect to sales
	➡️ Collect project building technical materials

I should ask questions based on this topics:
	➡️ Business Goal
	➡️ System User
	➡️ System Core Feature
	➡️ Similar Solution
	➡️ Web Scraping Meta Data
	➡️ Data Structure
	➡️ Web Application Meta Data







⬜️ How to build "Vision Document" for a project❓️
Vision document is base band about building high quality solutions.

Steps about building a Vision document:
	👉️ Make sure, you won the project
	👉️ Create a GitHub repository
	👉️ Copy "Vision Document" templates
	👉️ Write down project meta data
	👉️ Organize requirements
		➡️ write Upwork project description
		➡️ organize existing important document
		➡️ write application core feature as short sentence
		➡️ write project business goal
		➡️ work with domain knowledge and constrain
		➡️ analyze existing solutions and write down key point
	👉️ Process requirements
		➡️ identify systems user and their goals
		➡️ draw use case diagram
		➡️ write application description for SRS document
		➡️ write functional and nonfunctional requirements
		➡️ write project delivery process and materials
	👉️ Write UX UI design component

Project and Client meta data component ✋️:
	♊️ title
	♊️ price
	♊️ deadline
	♊️ project_name
	♊️ client_name
	♊️ client_designation
	♊️ country
	♊️ time_deference
	♊️ client_technical_expertise
	
Possible component about requirements gathering ✋️:
	♊️ client_job_description
	♊️ existing_important_document
	♊️ application_core_feature
	♊️ project_business_goals
	♊️ questions_answer
	♊️ domain_knowledge and constrain
	♊️ existing_solutions_key_point
	
Requirements processing steps and component ✋️:
	♊️ project_description
	♊️ functional_requirement
	♊️ nonfunctional_requirement
	♊️ project_delivery_process
	♊️ project_delivery_materials

UX UI design component ✋️:
	♊️ Who are user of this system?
	♊️ What are their desire expectations about this system?
	♊️ What are list of pages should have?






⬜️ How to build "Design Document"❓️
Building Design document means doing all hard word, raw coding and brain storming inside this part...
Based on "Design Document" milestone full solution will build, it insure easy and high quality solution building process.
Design document has this list of materials:
	➡️ "Design Document" writing on text file
	➡️ Jupyterlab Notebook for snipe source code
	➡️ Image directory for supported diagrams
	➡️ Chat GPT conversion markdown document

Steps about building a Design document:
	👉️ Make sure You have Vision Document, SRS, and other supported files
	👉️ Write important project meta data
	👉️ Write high level design component
			➡️ Write project delivery process and materials
			➡️ Define high level separation of concern about the solution
			➡️ Draw architecture about solution
			➡️ Define data structure
	👉️ Write low level deign framework component		
			➡️ Write Django framework components
			➡️ Write web scraping components
			➡️ Define code structure about project
			➡️ Organize technical parts that need repeatedly in iterative mode
	👉️ Define UX UI design process and possible task
	👉️ Write milestone task for building the solution


Design document project meta data components:
	♊️ project_name
	♊️ price
	♊️ deadline
	♊️ client_technical_expertise

High level design components:
	♊️ project_delivery_process
	♊️ high_level_separation_of_concern
	♊️ project_architecture
	♊️ data_structure







⬜️ How to build User Interface❓️
	👉️ Inspire with existing solutions
	👉️ Write down website structure
	👉️ Draw user flow diagram
	👉️ Draw web pages scratch on paper
	👉️ Draw wire frame diagram







⬜️ How to build a Django project❓️
	👉️ Make sure, You have "Design Document"
	👉️ Project
	👉️ Application
	👉️ Setup file structure
	👉️ Setup Django project settings
	👉️ Define models about your application
	👉️ Define admin
	👉️ Migrate models and create super user
	👉️ Create forms based on requirements
	👉️ Define views as requirements
	👉️ Create URL patterns
	👉️ Design templates and work with static file
	👉️ Implement authentication and sessions
	👉️ Integrating web scraping code
	👉️ Handle exceptions and display meaningful error messages to the user
	👉️ Deploy the application

	➡️ List of common framework component for building Django project:
		♊️ django_framework_core_feature
		♊️ project_name
		♊️ application_name
		♊️ model_class_name
		♊️ superuser_name
		♊️ views_description
		♊️ urls_pattern_description
		♊️ web_scraping_integrating_description
		♊️ forms_description
		♊️ database_query_description

		




What are task need to eat 🖐️?
	👉️ Building formal SRS document











## RAF ##


⬜️ What are supported materials available building Django application efficiency❓️
	➡️ django-crispy-forms (https://django-crispy-forms.readthedocs.io/en/latest/)
	➡️ django-import-export (https://django-import-export.readthedocs.io/en/latest/index.html)
	➡️ django-filter (https://django-filter.readthedocs.io/en/stable/)
	➡️ Django Debug Toolbar (https://django-debug-toolbar.readthedocs.io/en/latest/)
	➡️ Django-Sentry (https://docs.sentry.io/platforms/python/guides/django/)
	➡️ django-extensions (https://django-extensions.readthedocs.io/en/stable/index.html)
	➡️ django-simple-history (https://django-simple-history.readthedocs.io/)
	➡️ django-model-utils (https://github.com/jazzband/django-model-utils)
	➡️ django-environ (https://django-environ.readthedocs.io/en/latest/)





## Raw Requirements for Django ##
- virtual environment
- define project requirements
- choose database
- define structure of the project
- work with security
- implement caching
- setup 3rd party packages for Django best practices
- implement analytic in your project, to track the performance and usage of the application
- implement logging in your project, to track errors and debug issues
- optimize the performance of the application, by using efficient algorithms, minimizing the number of database queries, and using caching where possible
- implement continuous integration and deployment
- implement email and SMS notifications in your project, to send notifications to users
